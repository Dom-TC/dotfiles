#!/usr/bin/env python
# coding=UTF-8

from __future__ import absolute_import
import math, subprocess, sys, logging

p = subprocess.Popen(["ioreg", "-rc", "AppleSmartBattery"], universal_newlines=True ,stdout=subprocess.PIPE)
output = p.communicate()[0]

try:
    o_max = [l for l in output.splitlines() if 'MaxCapacity' in l][0]
    o_cur = [l for l in output.splitlines() if 'CurrentCapacity' in l][0]

    b_max = float(o_max.rpartition('=')[-1].strip())
    b_cur = float(o_cur.rpartition('=')[-1].strip())

    charge = b_cur / b_max
    charge_threshold = int(math.ceil(10 * charge))

    total_slots, slots = 10, []
    filled = int(math.ceil(charge_threshold * (total_slots / 10.0))) * u'â–¸'
    empty = (total_slots - len(filled)) * u'â–¹'

    out = (filled + empty).encode('utf-8')

    color_green = '%{[32m%}'
    color_yellow = '%{[33m%}'
    color_red = '%{[31m%}'
    color_reset = '%{[00m%}'
    color_out = (
        color_green if len(filled) > 6
        else color_yellow if len(filled) > 4
        else color_red
    )

    #  Check python version
    if(sys.version[:1] == "2"):
        out = color_out + str(out) + color_reset # Python 2
    elif(sys.version[:1] == "3"):
        out = color_out + out.decode() + color_reset # Python 3

except Exception as e:
    out = ''
    logging.exception("An error occured")

finally:
    print(out)
